{"version":3,"sources":["webpack:///./src/templates/project.tsx"],"names":["PBox","styled","AnimatedBox","Content","Box","props","transparentize","bg","theme","space","breakpoints","Category","fontSizes","Description","animated","div","PButton","Button","color","readableColor","Project","data","project","images","categoryAnimation","useSpring","config","slow","from","opacity","transform","to","titleAnimation","delay","descAnimation","imagesAnimation","pathname","slug","title","title_detail","desc","node","parent","banner","cover","childImageSharp","resize","src","individual","py","px","style","category","h1","dangerouslySetInnerHTML","__html","nodes","map","image","alt","name","key","fluid","textAlign","query"],"mappings":"0QAUMA,EAAOC,YAAOC,KAAV,gEAAGD,CAAH,qCAKJE,EAAUF,YAAOG,KAAV,mEAAGH,CAAH,+HACS,SAACI,GAAD,OAAWC,YAAe,GAAKD,EAAME,OAGtC,SAACF,GAAD,OAAWA,EAAMG,MAAMC,MAAM,OAEzB,SAACJ,GAAD,OAAWA,EAAMG,MAAME,YAAY,MACrC,SAACL,GAAD,OAAWA,EAAMG,MAAMC,MAAM,MAK9CE,EAAWV,YAAOC,KAAV,oEAAGD,CAAH,mEAEC,SAACI,GAAD,OAAWA,EAAMG,MAAMI,UAAU,MAI1CC,EAAcZ,YAAOa,IAASC,KAAnB,uEAAGd,CAAH,sHAQXe,EAAUf,YAAOgB,KAAV,mEAAGhB,CAAH,+BACG,SAACI,GAAD,MAA4B,UAAhBA,EAAMa,MAAoB,QAAUb,EAAMa,SAC3D,SAACb,GAAD,OAAWc,YAA8B,UAAhBd,EAAMa,MAAoB,QAAUb,EAAMa,UAwF/DE,UA7CqC,SAAC,GAAkC,QAAhCC,KAAQC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,OAChEC,EAAoBC,YAAU,CAClCC,OAAQA,IAAOC,KACfC,KAAM,CAAEC,QAAS,EAAGC,UAAW,4BAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,0BAGzBE,EAAiBP,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAKL,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KACnGK,EAAgBT,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAKL,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAClGM,EAAkBV,YAAU,CAAEC,OAAQA,IAAOC,KAAMM,MAAO,IAAKL,KAAM,CAAEC,QAAS,GAAKE,GAAI,CAAEF,QAAS,KAE1G,OACE,kBAAC,IAAD,CAAQX,MAAOI,EAAQJ,OACrB,kBAAC,IAAD,CACEkB,SAAUd,EAAQe,KAClBC,MAAUhB,EAAQiB,aAAb,WACLC,KAAMlB,EAAQkB,KACdC,KAAMnB,EAAQoB,OACdC,OAAQrB,EAAQsB,MAAMC,gBAAgBC,OAAOC,IAC7CC,YAAU,IAEZ,kBAAChD,EAAD,CAAMiD,GAAI,GAAIC,GAAI,CAAC,EAAG,EAAG,EAAG,KAC1B,kBAACvC,EAAD,CAAUwC,MAAO3B,GAAoBF,EAAQ8B,UAC7C,kBAAC,IAASC,GAAV,CAAaF,MAAOnB,GAAiBV,EAAQiB,cAC7C,kBAAC1B,EAAD,CAAasC,MAAOjB,GAClB,yBAAKoB,wBAAyB,CAAEC,OAAQjC,EAAQkB,UAGpD,kBAACrC,EAAD,CAASI,GAAIe,EAAQJ,MAAO+B,GAAI,IAC9B,kBAACjD,EAAD,CAAMmD,MAAOhB,EAAiBe,GAAI,CAAC,EAAG,EAAG,EAAG,KACzC3B,EAAOiC,MAAMC,KAAI,SAACC,GAAD,OAChB,kBAAC,IAAD,CAAKC,IAAKD,EAAME,KAAMC,IAAKH,EAAMb,gBAAgBiB,MAAMf,IAAKe,MAAOJ,EAAMb,gBAAgBiB,aAI/F,kBAAC9D,EAAD,CAAMmD,MAAO,CAAEY,UAAW,UAAYd,GAAI,GAAIC,GAAI,CAAC,EAAG,EAAG,EAAG,KAC1D,+DACA,kBAAClC,EAAD,CAASE,MAAOI,EAAQJ,MAAO+B,GAAI,EAAGC,GAAI,GAA1C,iBAUD,IAAMc,EAAQ","file":"component---src-templates-project-tsx-9f12f9ac7735851529c3.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { transparentize, readableColor } from 'polished'\nimport styled from 'styled-components'\nimport { config, useSpring, animated } from 'react-spring'\nimport Layout from '../components/layout'\nimport { Box, AnimatedBox, Button } from '../elements'\nimport SEO from '../components/SEO'\n\nconst PBox = styled(AnimatedBox)`\n  max-width: 1400px;\n  margin: 0 auto;\n`\n\nconst Content = styled(Box)<{ bg: string }>`\n  background-color: ${(props) => transparentize(0.9, props.bg)};\n\n  .gatsby-image-wrapper:not(:last-child) {\n    margin-bottom: ${(props) => props.theme.space[10]};\n\n    @media (max-width: ${(props) => props.theme.breakpoints[3]}) {\n      margin-bottom: ${(props) => props.theme.space[8]};\n    }\n  }\n`\n\nconst Category = styled(AnimatedBox)`\n  letter-spacing: 0.05em;\n  font-size: ${(props) => props.theme.fontSizes[1]};\n  text-transform: uppercase;\n`\n\nconst Description = styled(animated.div)`\n  max-width: 960px;\n  letter-spacing: -0.003em;\n  --baseline-multiplier: 0.179;\n  --x-height-multiplier: 0.35;\n  line-height: 1.58;\n`\n\nconst PButton = styled(Button)<{ color: string }>`\n  background: ${(props) => (props.color === 'white' ? 'black' : props.color)};\n  color: ${(props) => readableColor(props.color === 'white' ? 'black' : props.color)};\n`\n\ntype PageProps = {\n  data: {\n    project: {\n      title_detail: string\n      color: string\n      category: string\n      desc: string\n      slug: string\n      parent: {\n        modifiedTime: string\n        birthTime: string\n      }\n      cover: {\n        childImageSharp: {\n          resize: {\n            src: string\n          }\n        }\n      }\n    }\n    images: {\n      nodes: {\n        name: string\n        childImageSharp: {\n          fluid: {\n            aspectRatio: number\n            src: string\n            srcSet: string\n            sizes: string\n            base64: string\n            tracedSVG: string\n            srcWebp: string\n            srcSetWebp: string\n          }\n        }\n      }[]\n    }\n  }\n}\n\nconst Project: React.FunctionComponent<PageProps> = ({ data: { project, images } }) => {\n  const categoryAnimation = useSpring({\n    config: config.slow,\n    from: { opacity: 0, transform: 'translate3d(0, -30px, 0)' },\n    to: { opacity: 1, transform: 'translate3d(0, 0, 0)' },\n  })\n\n  const titleAnimation = useSpring({ config: config.slow, delay: 300, from: { opacity: 0 }, to: { opacity: 1 } })\n  const descAnimation = useSpring({ config: config.slow, delay: 600, from: { opacity: 0 }, to: { opacity: 1 } })\n  const imagesAnimation = useSpring({ config: config.slow, delay: 800, from: { opacity: 0 }, to: { opacity: 1 } })\n\n  return (\n    <Layout color={project.color}>\n      <SEO\n        pathname={project.slug}\n        title={`${project.title_detail} | Jodie`}\n        desc={project.desc}\n        node={project.parent}\n        banner={project.cover.childImageSharp.resize.src}\n        individual\n      />\n      <PBox py={10} px={[6, 6, 8, 10]}>\n        <Category style={categoryAnimation}>{project.category}</Category>\n        <animated.h1 style={titleAnimation}>{project.title_detail}</animated.h1>\n        <Description style={descAnimation}>\n          <div dangerouslySetInnerHTML={{ __html: project.desc }} />\n        </Description>\n      </PBox>\n      <Content bg={project.color} py={10}>\n        <PBox style={imagesAnimation} px={[6, 6, 8, 10]}>\n          {images.nodes.map((image) => (\n            <Img alt={image.name} key={image.childImageSharp.fluid.src} fluid={image.childImageSharp.fluid} />\n          ))}\n        </PBox>\n      </Content>\n      <PBox style={{ textAlign: 'center' }} py={10} px={[6, 6, 8, 10]}>\n        <h2>Want to start your own project?</h2>\n        <PButton color={project.color} py={4} px={8}>\n          Contact Us\n        </PButton>\n      </PBox>\n    </Layout>\n  )\n}\n\nexport default Project\n\nexport const query = graphql`\n  query ProjectTemplate($slug: String!, $images: String!) {\n    project: projectsYaml(slug: { eq: $slug }) {\n      title_detail\n      color\n      category\n      desc\n      slug\n      parent {\n        ... on File {\n          modifiedTime\n          birthTime\n        }\n      }\n      cover {\n        childImageSharp {\n          resize(width: 1200, height: 675, quality: 80) {\n            src\n          }\n        }\n      }\n    }\n    images: allFile(filter: { relativePath: { regex: $images } }, sort: { fields: name, order: ASC }) {\n      nodes {\n        name\n        childImageSharp {\n          fluid(quality: 95, maxWidth: 1200) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}